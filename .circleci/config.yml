version: 2.1

executors:
  docker-executor:
    parameters:
      version_file:
        type: string
        default: app/backend/book-store/version.txt
    docker:
      - image: cimg/python:3.12
    environment:
      VERSION_FILE: <<parameters.version_file>>

commands:
  setup-git:
    steps:
      - run:
          name: Configure Git
          command: |
            git config user.email "ci@example.com"
            git config user.name "CircleCI"
            git remote set-url origin https://${GIT_AUTH_TOKEN}@github.com/emilyzeng1977/book-store.git
  install-bump2version:
    steps:
      - run:
          name: Install bump2version
          command: pip install bump2version

jobs:
  build:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Dummy build step
          command: echo "Build complete"

  approve-to-push-image:
    type: approval

  push-image:
    executor: docker-executor
    environment:
      DOCKERFILE_PATH: app/backend/book-store
      PROJECT_NAME: book-store
    steps:
      - checkout
      - setup_remote_docker  # 启用 Docker 引擎
      - run:
          name: Docker login
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Read version
          command: |
            VERSION=$(cat "$VERSION_FILE")
            echo "export VERSION=${VERSION}" >> "$BASH_ENV"
            echo "IMAGE_NAME=${DOCKERHUB_USERNAME}/${PROJECT_NAME}" >> "$BASH_ENV"
      - run:
          name: Build Docker image
          command: |
            source "$BASH_ENV"
            docker build -t $IMAGE_NAME:$VERSION -t $IMAGE_NAME:latest "$DOCKERFILE_PATH"
      - run:
          name: Push Docker image
          command: |
            source "$BASH_ENV"
            docker push $IMAGE_NAME:$VERSION
            docker push $IMAGE_NAME:latest

  approve-to-create-release-branch:
    type: approval

  create-release-branch:
    executor: docker-executor
    steps:
      - checkout
      - install-bump2version
      - run:
          name: Get release version (strip -SNAPSHOT)
          command: |
            CURRENT_DEV_VERSION=$(cat "$VERSION_FILE")
            RELEASE_VERSION="${CURRENT_DEV_VERSION%-SNAPSHOT}"
            RC_VERSION=${RELEASE_VERSION}-RC
            echo "export CURRENT_DEV_VERSION=${CURRENT_DEV_VERSION}" >> "$BASH_ENV"
            echo "export RELEASE_VERSION=${RELEASE_VERSION}" >> "$BASH_ENV"
            echo "export RC_VERSION=${RC_VERSION}" >> "$BASH_ENV"
      - setup-git
      - run:
          name: Checkout release branch from develop
          command: |
            source "$BASH_ENV"
            git fetch origin
            git checkout -b release/${RELEASE_VERSION} origin/develop

      - run:
          name: Bump version and push release branch
          command: |
            source "$BASH_ENV"
            bump2version --new-version ${RC_VERSION} --verbose patch
            git add .
            git commit -m "chore: bump version to ${RC_VERSION}"
            git push origin release/${RELEASE_VERSION}

  approve-to-start-release:
    type: approval

  start-release:
    executor: docker-executor
    steps:
      - checkout
      - install-bump2version
      - run:
          name: Install OpenCommit
          command: |
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo bash -
            sudo apt-get install -y nodejs git
            sudo npm install -g opencommit
      - run:
          name: Load and prepare version info
          command: |
            RC_VERSION=$(cat "$VERSION_FILE")
            RELEASE_VERSION="${RC_VERSION%-RC}"
            echo "export RC_VERSION=${RC_VERSION}" >> "$BASH_ENV"
            echo "export RELEASE_VERSION=${RELEASE_VERSION}" >> "$BASH_ENV"
      - setup-git
      - run:
          name: Merge release branch into main
          command: |
            source "$BASH_ENV"
            git fetch origin
            git checkout main
            git merge -X theirs --no-ff release/$RELEASE_VERSION -m "chore: release $RELEASE_VERSION"
      - run:
          name: Bump version on main to official release
          command: |
            source "$BASH_ENV"
            bump2version --new-version "$RELEASE_VERSION" --verbose patch
            git add .
            if ! git diff --cached --quiet; then
              git commit -m "chore: set version to $RELEASE_VERSION"
              git push origin main
            else
              echo "No changes to commit."
            fi
      - run:
          name: Generate release notes and tag the release
          command: |
            source "$BASH_ENV"
            export OPENAI_API_KEY=${OPENAI_API_KEY}
            export OPENCOMMIT_MODEL="gpt-4.1-nano-2025-04-14"
            PRE_RELEASE_VERSION=$(echo "$RELEASE_VERSION" | awk -F. '{printf "%d.%d.0", $1, $2-1}')
            echo "PRE_RELEASE_VERSION: ${PRE_RELEASE_VERSION}"            
            RELEASE_NOTES=$(npx opencommit changelog --no-emojis --since "v${PRE_RELEASE_VERSION}")
            echo "Release Notes:"
            echo "$RELEASE_NOTES"

            git tag -a "v${RELEASE_VERSION}" -m "$RELEASE_NOTES"
            git push origin "v${RELEASE_VERSION}"
            

  merge-back-to-develop:
    executor: docker-executor
    steps:
      - checkout
      - setup-git
      - run:
          name: Merge main branch back into develop
          command: |
            git fetch origin
            git checkout develop
            git merge -X theirs origin/main -m "chore: merge main back to develop"
            git push origin develop

  bump-develop-version:
    executor: docker-executor
    steps:
      - checkout
      - install-bump2version
      - setup-git
      - run:
          name: Checkout develop branch
          command: |
            git fetch origin
            git checkout develop
      - run:
          name: Bump to next SNAPSHOT version
          command: |
            RELEASE_VERSION=$(cat "$VERSION_FILE")          
            # 解析 major, minor, patch
            IFS='.' read -r MAJOR MINOR PATCH \<<< "$RELEASE_VERSION"
            
            # minor +1，patch归0
            NEXT_MINOR=$((MINOR + 1))
            NEXT_PATCH=0
            
            # 组装新版本号
            NEXT_DEV_VERSION="${MAJOR}.${NEXT_MINOR}.${NEXT_PATCH}-SNAPSHOT"
            
            echo "Next develop version: ${NEXT_DEV_VERSION}"
            bump2version --new-version ${NEXT_DEV_VERSION} --verbose patch
            git add .

            if ! git diff --cached --quiet; then
              git commit -m "chore: bump version to $NEXT_DEV_VERSION"
              git push origin develop
            else
              echo "No changes to commit."
            fi

workflows:
  version: 2
  release-flow:
    jobs:
      - build
      - approve-to-push-image:
          type: approval
          requires:
            - build
      - push-image:
          requires:
            - approve-to-push-image
      - approve-to-create-release-branch:
          type: approval
          requires:
            - build
          filters:
            branches:
              only:
                - develop
      - create-release-branch:
          requires:
            - approve-to-create-release-branch
          filters:
            branches:
              only:
                - develop
      - approve-to-start-release:
          type: approval
          requires:
            - build
          filters:
            branches:
              only:
                - /^release\/.*/
      - start-release:
          requires:
            - approve-to-start-release
          filters:
            branches:
              only:
                - /^release\/.*/
      - merge-back-to-develop:
          requires:
            - start-release
          filters:
            branches:
              only:
                - /^release\/.*/
      - bump-develop-version:
          requires:
            - merge-back-to-develop
          filters:
            branches:
              only:
                - /^release\/.*/